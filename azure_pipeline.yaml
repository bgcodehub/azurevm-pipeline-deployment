parameters:
- name: userPublicIp
  displayName: 'User Public IP'
  type: string
  default: ''
- name: vsEdition
  displayName: 'Visual Studio Edition'
  type: string
  values:
  - 'Enterprise'
  - 'Professional'
  - 'None (No SQL)'
  - 'None (+ SQL Server)'
  default: 'Professional'
- name: resourceGroup
  displayName: 'Resource Group'
  type: string
- name: vmName
  displayName: 'VM Name'
  type: string
- name: location
  displayName: 'Azure Location'
  type: string
  values:
    - 'eastus2'
    - 'eastus'
    - 'westus'
    - 'centralus'
    - 'canadacentral'
    - 'canadaeast'
    - 'uksouth'
    - 'ukwest'
    - 'australiaeast'
    - 'australiasoutheast'
    - 'northeurope'
    - 'westeurope'
    - 'westus2'
- name: adminUsername
  displayName: 'Admin Username'
  type: string
- name: emailAddress
  displayName: 'Email Address'
  type: string

variables:
  dnsName: ${{ parameters.vmName }}
  domainPattern: ${{ format('{0}.{1}.cloudapp.azure.com', parameters.vmName, parameters.location) }}

trigger: none

pool:
  vmImage: 'windows-latest'

stages:
- stage: VM_Creation
  jobs:
  - job: Create_VM
    steps:
    - powershell: |
        Install-Module -Name Az -AllowClobber -Force -Scope CurrentUser -SkipPublisherCheck -AllowPrerelease
        Import-Module Az
      displayName: 'Install/Update Az Module'
    - task: AzurePowerShell@4
      inputs:
        azureSubscription: $(azureSubscription)
        ScriptType: 'FilePath'
        ScriptPath: './create_vm.ps1'
        azurePowerShellVersion: 'LatestVersion'
        ScriptArguments: '-vmName ${{ parameters.vmName }} -resourceGroup ${{ parameters.resourceGroup }} -location ${{ parameters.location }} -adminUsername ${{ parameters.adminUsername }} -dnsName $(dnsName)'
      env:
        ADMINPASSWORD: $(adminPassword)
      displayName: 'Create VM'

- stage: Azure_Configuration
  jobs:
  - job: Configure_Azure
    steps:
    - powershell: |
        Install-Module -Name Az -AllowClobber -Force -Scope CurrentUser -SkipPublisherCheck -AllowPrerelease
        Import-Module Az
      displayName: 'Install/Update Az Module'
    - task: AzurePowerShell@4
      inputs:
        azureSubscription: $(azureSubscription)
        ScriptType: 'FilePath'
        ScriptPath: './configure_azure.ps1'
        azurePowerShellVersion: 'LatestVersion'
        ScriptArguments: '-vmName ${{ parameters.vmName }} -resourceGroup ${{ parameters.resourceGroup }} -userPublicIp ${{ parameters.userPublicIp }}'
      displayName: 'Configure Azure Resources'

- stage: VM_Preparation
  jobs:
  - job: Prepare_VM
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az vm run-command invoke --resource-group ${{ parameters.resourceGroup }} --name ${{ parameters.vmName }} --command-id RunPowerShellScript --scripts @./vm_preparation.ps1'
      displayName: 'Prepare VM with pre-configuration settings'

- stage: VM_Server_Configuration
  jobs:
  - job: Server_Config_VM
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az vm run-command invoke --resource-group ${{ parameters.resourceGroup }} --name ${{ parameters.vmName }} --command-id RunPowerShellScript --scripts @./vm_server_config.ps1 --parameters "dnsName=$(dnsName)" "emailAddress=${{ parameters.emailAddress }}" "domainPattern=$(domainPattern)"'
      displayName: 'Configure VM server-specific settings'

- stage: Software_Installation
  jobs:
  - job: Install_Software_VM
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az vm run-command invoke --resource-group ${{ parameters.resourceGroup }} --name ${{ parameters.vmName }} --command-id RunPowerShellScript --scripts @./vm_software_install.ps1 --parameters "vsEdition=${{ parameters.vsEdition }}" "vmName=${{ parameters.vmName }}" "adminUsername=${{ parameters.adminUsername }}"'
      displayName: 'Install software on VM'